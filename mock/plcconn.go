// Code generated by MockGen. DO NOT EDIT.
// Source: plcconn.go
//
// Generated by this command:
//
//	mockgen -source=plcconn.go -package=mock_plcconn -destination=./mock/plcconn.go
//

// Package mock_plcconn is a generated GoMock package.
package mock_plcconn

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockIPlcConn is a mock of IPlcConn interface.
type MockIPlcConn struct {
	ctrl     *gomock.Controller
	recorder *MockIPlcConnMockRecorder
}

// MockIPlcConnMockRecorder is the mock recorder for MockIPlcConn.
type MockIPlcConnMockRecorder struct {
	mock *MockIPlcConn
}

// NewMockIPlcConn creates a new mock instance.
func NewMockIPlcConn(ctrl *gomock.Controller) *MockIPlcConn {
	mock := &MockIPlcConn{ctrl: ctrl}
	mock.recorder = &MockIPlcConnMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIPlcConn) EXPECT() *MockIPlcConnMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockIPlcConn) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockIPlcConnMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockIPlcConn)(nil).Close))
}

// Connect mocks base method.
func (m *MockIPlcConn) Connect() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Connect")
	ret0, _ := ret[0].(error)
	return ret0
}

// Connect indicates an expected call of Connect.
func (mr *MockIPlcConnMockRecorder) Connect() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Connect", reflect.TypeOf((*MockIPlcConn)(nil).Connect))
}

// IsConnected mocks base method.
func (m *MockIPlcConn) IsConnected() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsConnected")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsConnected indicates an expected call of IsConnected.
func (mr *MockIPlcConnMockRecorder) IsConnected() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsConnected", reflect.TypeOf((*MockIPlcConn)(nil).IsConnected))
}

// OpenWriteClose mocks base method.
func (m *MockIPlcConn) OpenWriteClose(msg []byte) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OpenWriteClose", msg)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OpenWriteClose indicates an expected call of OpenWriteClose.
func (mr *MockIPlcConnMockRecorder) OpenWriteClose(msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OpenWriteClose", reflect.TypeOf((*MockIPlcConn)(nil).OpenWriteClose), msg)
}

// Write mocks base method.
func (m *MockIPlcConn) Write(msg []byte) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write", msg)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Write indicates an expected call of Write.
func (mr *MockIPlcConnMockRecorder) Write(msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockIPlcConn)(nil).Write), msg)
}
